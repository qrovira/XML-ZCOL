NAME
    XML::ZCOL - XML Zen-coding one-liners

VERSION
    Version 0.06

SYNOPSIS
    This module expands expressions similar to those used by zen-coding to
    build up pieces of XML documents.

        use XML::ZCOL;

        my $foo = zcol_expand("div#page>div.logo+ul#navigation>li*5>a");

        or

        my $zcol = XML::ZCOL->new( parser => "HTML", options => { indent => "\t" } );

        my $foo = $zcol->expand("div#page>div.logo+ul#navigation>li*5>a");

        # Would generate:
        #<div id="page">
        # <div class="logo"></div>
        # <ul id="navigation">
        #  <li><a href=""></a></li>
        #  <li><a href=""></a></li>
        #  <li><a href=""></a></li>
        #  <li><a href=""></a></li>
        #  <li><a href=""></a></li>
        # </ul>
        #</div>
        ...

PARSERS
    This module supports multiple parsers, which will be dinamically loaded
    from the XML::ZCOL::Parser namespace using Module::Pluggable. Right now,
    only two very similar parsers exists, one for XML and one for HTML.

  HTML
    An HTML generator, which inlines a few more elements than the more
    general html parser.

    It also has a couple more options to wrap the generated content inside
    html, head and body tags to generate valid html.

   Parser options
    indent
        A string value that will be used for indentation

    fullwrap
        Add a wrapper that includes html, head and body tags around the
        generated html.

    head_title
        The title to use in title tag when fullwrap is enabled

  XML
    Generate XML as a plain string. It does pretty much the same as the html
    parser, but inlines elements only when they have no child elements.

   Parser options
    indent
        A string value that will be used for indentation

    xml_declaration
        Adds the xml declaration tag on the first line

    xml_encoding
        Sets the encoding that will be used on the xml declaration (if
        xml_declaration is not enabled, this option is ignored)

EXPORTS
    zcol_expand( $template [, $parser [, $options] ] )
        Simple wrapper around the OO module interface

METHODS
    new( %args )
        Create a new zcol object.

        Options can include "parser" and "options", which will be the
        defaults for expansion

    $zcol->expand( $template [, $parser [, $options] ] )
        Expand an template and return the resulting xml string.

        You can optionally specify different parser or options arguments for
        this expansion.

DEBUGGING
    To dump the tree generated by the grammar, you can set
    $ENV{XML_ZCOL_GRAMMAR_DEBUG}.

    To debug the grammar itself, see Regexp::Grammars section on debugging.

    TL;DR: you can add this to the top of the grammar: <logfile: gram_log >
    <debug: on>

TODO
    Implement classfull parsers
        This module could be greatly improved by using classfull xml/html
        generation through any of the many XML libraries available on CPAN,
        as well as by using Conway's Regexp::Grammars ability to generate
        classfull trees at parse-time.

        By now, and to keep dependences to the minimum, it generates raw
        string data instead.

    Enhance grammar to support parameters on attributes
        This should not be complicated, since it is already mostly the same.
        Special attention should be paid to delimiter effect there.

    Enhance test suite
        A must for CPAN publication to make good use of tester's reports.

CHANGES
    v0.06

        Cleaned up the main module and split the parsers away into separate
        classes

    v0.05

        Debugging now disabled by default. See DEBUGGING for details

    v0.04

        Implemented content operator
        First quick implementation of paramaters

    v0.03

        First working version

KNOWN BUGS
    The grammar should be modified to correctly support distillation on
    grouping. On the first quick group implementation, the required changes
    made groups after a simple tag delete it from the stack. The current
    solution generates a children array which may have nested arrays
    (instead of hashes only), and a trick is done on parsers to get that
    specific case ok.

AUTHOR
    Quim Rovira, "<quim at rovira.cat>"

BUGS
    Please report any bugs or feature requests to "bug-xml-zcol at
    rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=XML-ZCOL>. I will be
    notified, and then you'll automatically be notified of progress on your
    bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc XML::ZCOL

    You can also look for information at:

    *   Github

        <http://github.com/qrovira/XML-ZCOL/>

ACKNOWLEDGEMENTS
    The format used for template expansion has been taken from Zen Coding
    project in google code.

    See http://code.google.com/p/zen-coding/ for more information

LICENSE AND COPYRIGHT
    Copyright 2010 Quim Rovira.

    This program is free software; you can redistribute it and/or modify it
    under the terms of either: the GNU General Public License as published
    by the Free Software Foundation; or the Artistic License.

    See http://dev.perl.org/licenses/ for more information.

